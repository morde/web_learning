Parameters:
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: Must be the name of an existing EC2 KeyPair.
    
  ImageId:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      Tags:
      - Key: Name
        Value: HelloWorldVPC
  Subnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock: 10.0.0.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone:
        Fn::Select:
        - '0'
        - Fn::GetAZs:
            Ref: AWS::Region
      Tags:
      - Key: Name
        Value: HelloWorldSubnet
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTTP access
      VpcId:
        Ref: VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        CidrIp: 0.0.0.0/0
  WebServerHost:
    Type: AWS::EC2::Instance
    Comment: Simple web server host
      AWS::CloudFormation::Init:
        config:
            packages:
                yum:
                httpd: []
                php: []
            groups:
                apache: {}
            users:
                "apache":
                  groups:
                    - "apache"
            files:
                "/var/www/html/index.php":
                  content: !Sub |
                    <?php
                    echo '<h1>AWS CloudFormation sample PHP application for ${AWS::StackName}</h1>';
                    ?>
                  mode: '000644'
                  owner: apache
                  group: apache
                "/etc/cfn/cfn-hup.conf":
                  content: !Sub |
                    [main]
                    stack=${AWS::StackId}
                    region=${AWS::Region}
                  mode: "000400"
                  owner: "root"
                  group: "root"
                "/etc/cfn/hooks.d/cfn-auto-reloader.conf":
                  content: !Sub |
                    [cfn-auto-reloader-hook]
                    triggers=post.update
                    path=Resources.WebServerHost.Metadata.AWS::CloudFormation::Init
                    action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource WebServerHost --region ${AWS::Region}
                  mode: "000400"
                  owner: "root"
                  group: "root"
            services:
                sysvinit:
                  httpd:
                    enabled: 'true'
                    ensureRunning: 'true'
                  postfix:
                    enabled: 'false'
                    ensureRunning: 'false'
                  cfn-hup:
                    enable: 'true'
                    ensureRunning: 'true'
                    files:
                      - "/etc/cfn/cfn-hup.conf"
                      - "/etc/cfn/hooks.d/cfn-auto-reloader.conf"
    Properties:
      InstanceType: t2.micro
      ImageId: !Ref ImageId
      KeyName:
        Ref: KeyName
      SecurityGroupIds:
      - Ref: SecurityGroup
      SubnetId:
        Ref: Subnet
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash -xe
            
            # Get the latest CloudFormation helper scripts
            yum install -y aws-cfn-bootstrap
            
            # Start cfn-init
            /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource WebServerHost --region ${AWS::Region}
            
            # cfn-init completed so signal success or not
            /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource WebServerHost --region ${AWS::Region}
          
Outputs:
  WebsiteURL:
    Description: URL of the website
    Value:
      Fn::GetAtt:
      - WebServerHost
      - PublicDnsName
